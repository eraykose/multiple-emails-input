{"version":3,"sources":["webpack://EmailsInput/./src/emailsInputs.ts","webpack://EmailsInput/./src/index.ts","webpack://EmailsInput/webpack/bootstrap","webpack://EmailsInput/webpack/startup","webpack://EmailsInput/webpack/runtime/make namespace object"],"names":["KeyboardEventCode","EmailType","element","props","this","rootElement","emails","inputPlaceholder","placeholder","render","initialValues","forEach","email","console","log","add","getEmails","type","valid","all","map","reduce","res","push","value","invalid","trim","split","length","some","item","isEmailValid","isValidEmail","emailElement","renderEmailElement","containerElement","insertBefore","inputElement","scrollTop","scrollHeight","RegExp","test","removeEmailElement","filter","removeChild","isValid","document","createElement","className","removeEmailButton","innerHTML","addEventListener","emailTextElement","appendChild","renderInputElement","setAttribute","addEmail","event","key","keyCode","Enter","Comma","stopPropagation","preventDefault","clipboardData","window","getData","EmailsInput","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty"],"mappings":"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","file":"emails-input.js","sourcesContent":["interface EmailsInputProps {\n    initialValues?: string[];\n    placeholder?: string;\n}\ninterface Email {\n    value: string;\n    valid: Boolean;\n}\n\nenum KeyboardEventCode {\n    Enter = 'Enter',\n    Comma = ',',\n}\n\nenum EmailType {\n    all = 'all',\n    valid = 'valid',\n    invalid = 'invalid',\n}\n\nclass EmailsInput {\n    private emails: Email[];\n    private rootElement: HTMLDivElement;\n    private containerElement: HTMLDivElement;\n    private inputElement: HTMLInputElement;\n\n    private inputPlaceholder: string;\n\n    constructor(element: HTMLDivElement, props: EmailsInputProps = {}) {\n        this.rootElement = element;\n        this.emails = [];\n        this.inputPlaceholder = props.placeholder || 'add more people...';\n\n        this.render();\n\n        if (props.initialValues) {\n            props.initialValues.forEach((email) => {\n                console.log(email);\n                this.add(email);\n            });\n        }\n    }\n\n    // Returns the current emails by valid type. Default type value is valid.\n    getEmails(type: EmailType = EmailType.valid): string[] {\n        if (type === EmailType.all) {\n            return this.emails.map((email) => email.value);\n        }\n\n        if (type === EmailType.valid) {\n            return this.emails.reduce((res, email) => {\n                if (email.valid) {\n                    res.push(email.value);\n                }\n                return res;\n            }, []);\n        }\n\n        if (type === EmailType.invalid) {\n            return this.emails.reduce((res, email) => {\n                if (!email.valid) {\n                    res.push(email.value);\n                }\n                return res;\n            }, []);\n        }\n    }\n\n    // Adds a email or emails to the list, then render it into the DOM.\n    add(value: string): void {\n        value\n            .trim()\n            .split(',')\n            .forEach((email) => {\n                if (email.length > 0 && !this.emails.some((item) => item.value === email)) {\n                    email = email.trim();\n\n                    const isEmailValid: Boolean = this.isValidEmail(email);\n                    const emailElement: HTMLDivElement = this.renderEmailElement(email, isEmailValid);\n\n                    this.emails.push({\n                        value: email,\n                        valid: isEmailValid,\n                    });\n\n                    this.containerElement.insertBefore(emailElement, this.inputElement!);\n                    this.containerElement.scrollTop = this.containerElement.scrollHeight;\n                }\n            });\n    }\n\n    // Checks if an email address is valid\n    private isValidEmail(email: string): boolean {\n        const regex: RegExp = RegExp(/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n        return regex.test(email);\n    }\n\n    // Deletes an email and it's element from the DOM.\n    private removeEmailElement(element: HTMLElement, email: string) {\n        this.emails = this.emails.filter((item) => item.value !== email);\n        this.containerElement.removeChild(element);\n    }\n\n    // Render an email element into the DOM.\n    private renderEmailElement(email: string, isValid: Boolean): HTMLDivElement {\n        // Creates an empty div element for email\n        const emailElement = document.createElement('div');\n        emailElement.className = `EmailsInput__email${\n            isValid ? ' EmailsInput__email--valid' : ' EmailsInput__email--invalid'\n        }`;\n\n        // Creates a remove button element for email element\n        const removeEmailButton = document.createElement('button');\n        removeEmailButton.innerHTML = '&times;';\n        removeEmailButton.className = 'EmailsInput__email__remove';\n\n        // Adds eventlistener to remove the email element\n        removeEmailButton.addEventListener('click', () => this.removeEmailElement(emailElement, email));\n\n        // Creates an empty div element for email text\n        const emailTextElement = document.createElement('div');\n        emailTextElement.innerHTML = email;\n\n        emailElement.appendChild(emailTextElement);\n        emailElement.appendChild(removeEmailButton);\n\n        return emailElement;\n    }\n\n    // Renders an input element that is used for getting emails\n    private renderInputElement() {\n        this.inputElement = document.createElement('input');\n        this.inputElement.setAttribute('type', 'email');\n        this.inputElement.setAttribute('multiple', '');\n        this.inputElement.setAttribute('placeholder', this.inputPlaceholder);\n        this.inputElement.className = 'EmailsInput__input';\n\n        const addEmail = (email: string): void => {\n            if (email.length > 0) {\n                this.add(email);\n                this.inputElement.value = '';\n            }\n        };\n\n        // Adds email if user input an enter key or comma key to input element\n        this.inputElement.addEventListener('keyup', (event: KeyboardEvent) => {\n            const key = event.key || event.keyCode;\n\n            if (key === KeyboardEventCode.Enter || key === KeyboardEventCode.Comma) {\n                addEmail(this.inputElement.value);\n            }\n        });\n\n        // Adds email if user paste data into input element\n        this.inputElement.addEventListener('paste', (event: ClipboardEvent) => {\n            // Stop data actually being pasted into input\n            event.stopPropagation();\n            event.preventDefault();\n\n            // Get pasted data via clipboard API\n            const clipboardData: any = event.clipboardData || (<any>window).clipboardData;\n            const value: string = clipboardData.getData('Text');\n\n            addEmail(value);\n        });\n\n        // Adds email if user remove focus from input element\n        this.inputElement.addEventListener('blur', () => {\n            addEmail(this.inputElement.value);\n        });\n\n        return this.inputElement;\n    }\n\n    // Renders EmailsInput component into the root element\n    render() {\n        this.containerElement = document.createElement('div');\n        this.containerElement.className = 'EmailsInput EmailsInput__content';\n\n        this.containerElement.appendChild(this.renderInputElement());\n\n        this.rootElement.appendChild(this.containerElement);\n    }\n}\n\n// Exports the EmailsInput API to use without \"new\" keyword\nexport default (element: HTMLDivElement, props?: EmailsInputProps) => {\n    return new EmailsInput(element, props);\n};\n","import EmailInputs from './emailsInputs';\nimport './emailsInputs.scss';\n\nmodule.exports = EmailInputs;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(223);\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}